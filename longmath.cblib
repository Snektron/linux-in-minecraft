function mul64_next(a_mod, b_mod, c_mod, d_mod)
    # Use the usual identity
    # a = a1 * b + a0
    # b = b1 * b + b0
    # c = (a1 * b + a0) * (b1 * b + b0)
    #   = a1 * b1 * b * b + a0 * b1 * b + b0 * a1 * b + a0 * b0
    #   = a1 * b1 * b * b + (a0 * b1 + b0 * a1) * b + a0 * b0
    # b = 2**16

    a1 = a / 0x10000 % a_mod
    a0 = a % 0x10000

    b1 = b / 0x10000 % b_mod
    b0 = b % 0x10000

    # tell @a "a0=(a0) a1=(a1) b0=(b0) b1=(b1)"

    lo = a0 * b0
    mi0 = a0 * b1
    mi1 = a1 * b0
    hi = a1 * b1

    # tell @a "lo=(lo) mi0=(mi0) mi1=(mi1) hi=(hi)"

    # Each part of c will be 16 bits so that we
    # can use simple overflow addition rules
    c0 = lo
    c1 = c0 / 0x10000 % 0x10000 + mi0 % 0x10000 + mi1 % 0x10000
    c2 = c1 / 0x10000 % 0x10000 + mi0 / 0x10000 % d_mod + mi1 / 0x10000 % c_mod + hi % 0x10000
    c3 = c2 / 0x10000 % 0x10000 + hi / 0x10000 % c_mod

    # tell @a "c0=(c0) c1=(c1) c2=(c2) c3=(c3)"

    c0 %= 0x10000
    c1 %= 0x10000
    c2 %= 0x10000
    c3 %= 0x10000

    c0 += c1 * 0x10000
    c2 += c3 * 0x10000

    # Return result in c0 (low), c1 (high)
    c1 = c2

    # tell @a "c0=(c0) c1=(c1)"
end

function mul64u(a, b)
    mul64_next(0x10000, 0x10000, 0x10000, 0x10000)
end

function mul64(a, b)
    mul64_next(0, 0, 0, 0)
end

function mul64su(a, b)
    mul64_next(0, 0x10000, 0, 0x10000)
end

function udivmod(a, b)
    if b == 0
        div = -1
        rem = a
    else if a == 0
        # Filter out trivial case
        div = 0
        rem = 0
    else if a == b
        # Filter out trivial case
        div = 1
        rem = 0
    else if b < 0
        # If b < 0, that means that unsigned(b) >= 2**31
        # There are 4 cases:
        # - If a == b, the result is 1
        # - unsigned(a) < unsigned(b). The division is 0. Note: in this
        #   case a could be positive, but the condition still holds. Since
        #   unsigned(a) < unsigned(b), the remainder is just a.
        # - unsigned(a) > unsigned(b). The division is 1. In this situation
        #   2**31 <= unsinged(b) < unsigned(a) < 2**32, so the remainder is
        #   given by a - b.
        if a - INT_MIN < b - INT_MIN
            div = 0
            rem = a
        else
            div = 1
            rem = a - b
        end
    else if a >= 0
        # We have 0 <= a, unsigned(a) < 2**31 and 0 < b, unsigned(b) < 2**31, so we can
        # perform normal divison
        div = a / b
        rem = a % b
    else
        # The tricky case
        # We have unsigned(a) >= 2**31 and 0 < b, unsigned(b) < 2**31. We will do
        # one round of

        # Do the first iteration of long division to make the result positive.
        # First, find the the largest multiple of b where b < unsigned(a). We will
        # do that by first doubling b until its negative and then checking whether b < a.

        b_scaled = b
        multiple = 1
        cnt = 0
        while b_scaled > 0
            b_scaled *= 2
            multiple *= 2
            cnt += 1
        end

        # Remove scaled b from a to make a positive
        a -= b_scaled

        # Now we can just perform the normal division, and then add the multiple to it
        div = a / b
        div += multiple

        # b_scaled is a multiple of b, so we don't need to account for it here.
        rem = a % b
    end
end
