macro $test($test_name, $test_case)
    tell @a "{Grunning test {g$test_name"

    machine_reset()

    $program = $assemble($test_case)
    len = 0
    for $inst in $program
        value = $inst
        memory_set(len, value)
        len++
    end
    len *= 4

    while pc < len and not error
        cycle()
    end

    $expected = $run($program)

    if error
        tell @a "{Rmachine entered error state"
    end

    if not error
        $expected_pc = $expected[32]
        expected_pc = $expected_pc

        if expected_pc == pc
        else
            tell @a "{Runexpected final PC: expected {wpc=(expected_pc){R, got (pc)"
            error = 1
        end
    end

    if not error
        for $i in $range(32)
            $val = $expected[$i]
            actual = x[$i]
            expected = $val
            if actual == expected
            else
                tell @a "{Rinvalid final state: expected {wx$i={W$val{R, got (actual)"
                error = 1
            end
        end
    end

    if error
        tell @a "{r$test_name {Rfailed"
        failed_tests++
    else
        tell @a "{g$test_name {Gok"
        passed_tests++
    end
end

function run_tests()
    $test("add, sub, addi", [
        "addi x1, x0, 1000",
        "addi x2, x0, -1234",
        "add x3, x1, x2",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x3, x3, x3",
        "add x4, x3, x3",
        "add x3, x4, x3",
        "add x3, x3, x3",
        "add x5, x3, x3",
        "add x0, x3, x1",
        "add x7, x0, x4",
        "sub x8, x5, x3",
        "sub x9, x8, x1",
    ])

    $test("shift", [
        "addi x1, x0, 1234",
        "slli x2, x1, 3",
        "srli x3, x2, 3",
        "addi x8, x0, 1",
        "slli x4, x8, 31",
        "srli x5, x4, 10",
        "srai x6, x4, 10",
        "srai x7, x1, 6",
        "srli x7, x1, 6",
        "addi x10, x0, -1111",
        "addi x11, x0, 19",
        "sra x12, x10, x11",
        "sll x13, x10, x11",
        "srl x14, x10, x11",
        "addi x16, x0, 30",
        "sll x15, x1, x16",
    ])

    $test("bitwise", [
        "ori x1, x0, 0b0001",
        "ori x2, x1, 0b1000",
        "ori x3, x2, -1",
        "andi x4, x3, 1234",
        "andi x5, x4, -1111",
        "xori x9, x5, 111",
        "xori x10, x5, -44",
        "or x6, x4, x5",
        "and x7, x4, x5",
        "xor x8, x4, x5",
    ])

    $test("slt", [
        "addi x1, x0, 666",
        "slti x2, x1, 77",
        "slti x3, x1, 777",
        "slti x4, x1, 666",
        "addi x8, x0, -123",
        "slti x5, x8, -100",
        "slti x6, x8, -200",
        "slti x7, x8, -123",
        "slt x9, x1, x8",
        "slt x9, x8, x1",
        "addi x1, x0, 999",
        "sltiu x10, x1, -1000",
        "sltiu x11, x1, 1000",
        "sltu x12, x1, x0",
        "addi x1, x0, -9",
        "sltiu x13, x1, -1000",
        "sltiu x14, x1, -1",
    ])

    $test("lui", [
        "lui x1, 123",
        "lui x2, 1048575",
        "lui x0, 4",
    ])

    $test("auipc", [
        "auipc x1, 1234",
        "auipc x2, 0",
        "auipc x3, 1048575",
        "auipc x4, 5555",
        "auipc x0, 1",
    ])

    $test("jal", [
        "jal x1, l1",
        ".word 0",
        "l2:",
        "jal x3, l3",
        ".word 0",
        "l3:",
        "jal x0, 1000",
        "l1:",
        "jal x2, l2",
        ".word 0",
    ])

    $test("jalr", [
        "add x1, x0, 20",
        "jalr x2, x1, 0",
        ".word 0",
        "jalr x4, x1, 8",
        ".word 0",
        "jalr x3, x1, -8",
        ".word 0",
        "jalr x0, x0, 1234",
        ".word 0",
    ])

    $test("branch", [
        "addi x1, x0, 123",
        "add x2, x1, x0",
        "beq x1, x2, l1",
        ".word 0",
        "l5:",
        "bgeu x3, x0, l6",
        ".word 0",
        "l1:",
        "bne x1, x0, l2",
        ".word 0",
        "l4:",
        "bltu x1, x3, l5",
        ".word 0",
        "l2:",
        "addi x3, x0, -10",
        "blt x3, x1, l3",
        ".word 0",
        "l3:",
        "bge x1, x3, l4",
        ".word 0",
        "l6:",
    ])

    $test("load and store, word aligned", [
        "addi x1, x0, 123",
        "addi x2, x0, 456",
        "addi x3, x0, -555",
        "addi x4, x0, 300",
        "addi x5, x0, 324",
        "sw x1, 0(x4)",
        "sw x2, 16(x4)",
        "sw x3, -12(x5)",
        "lw x7, 0(x4)",
        "lw x8, -12(x5)",
        "lw x9, -8(x5)",
    ])

    $test("store, byte", [
        "addi x1, x0, 100",
        "addi x2, x0, 2000",
        "addi x3, x0, -111",
        "addi x4, x0, -44",
        "addi x5, x0, 2001",
        "sb x1, 0(x2)",
        "sb x2, 0(x5)",
        "sb x3, 2(x2)",
        "sb x4, 3(x2)",
        "lw x6, 0(x2)",
        "sb x2, 1(x2)",
        "lw x7, 0(x2)",
        "sb x4, 2(x2)",
        "lw x8, 0(x2)",
        "sb x2, 2(x5)",
        "lw x9, 0(x2)",
        "sb x1, -1(x5)",
        "lw x10, 0(x2)",
    ])

    $test("store, half", [
        "addi x1, x0, 123",
        "addi x2, x0, 999",
        "addi x3, x0, 1000",
        "addi x4, x0, 1999",
        "sh x1, 0(x3)",
        "sh x2, 1(x3)",
        "lw x10, 0(x3)",
        "sh x3, 2(x3)",
        "lw x11, 0(x3)",
        "sh x4, 3(x3)",
        "lw x12, 0(x3)",
        "lw x13, 4(x3)",
        "sh x1, 7(x3)",
        "sh x4, 5(x3)",
        "lw x14, 4(x3)",
    ])

    $test("store, word misaligned", [
        "addi x1, x0, 2000",
        "li x2, 0xABCD1234",
        "li x3, 0x90EF5678",
        "li x4, 0xAAAABBBB",
        "li x5, 0xCCCCDDDD",
        "sw x4, 0(x1)",
        "sw x5, 4(x1)",
        "sw x2, 1(x1)",
        "lw x10, 0(x1)",
        "lw x11, 4(x1)",
        "sw x3, 2(x1)",
        "lw x12, 0(x1)",
        "lw x13, 4(x1)",
        "sw x2, 3(x1)",
        "lw x14, 0(x1)",
        "lw x15, 4(x1)",
    ])

    $test("load, byte", [
        "addi x1, x0, 500",
        "addi x31, x0, 509",
        "li x2, 0x01234567",
        "li x3, 0x89ABCDEF",
        "sw x4, 0(x1)",
        "sw x5, 4(x1)",
        "lb x6, 0(x1)",
        "lbu x7, 1(x1)",
        "lb x8, 2(x1)",
        "lbu x9, 3(x1)",
        "lb x10, 4(x1)",
        "lbu x11, -4(x31)",
        "lb x12, -3(x31)",
        "lbu x13, -2(x31)",
        "lb x14, -1(x31)",
    ])

    $test("load, half", [
        "addi x1, x0, 500",
        "addi x31, x0, 509",
        "li x2, 0x01234567",
        "li x3, 0x89ABCDEF",
        "lhu x6, 0(x1)",
        "lh x7, 1(x1)",
        "lhu x8, 2(x1)",
        "lh x9, 3(x1)",
        "lhu x10, 4(x1)",
        "lh x11, -4(x31)",
        "lhu x12, -3(x31)",
        "lh x13, -2(x31)",
        "lhu x14, -1(x31)",
    ])

    $test("load, word misaligned", [
        "addi x1, x0, 500",
        "addi x31, x0, 509",
        "li x2, 0x01234567",
        "li x3, 0x89ABCDEF",
        "lw x6, 0(x1)",
        "lw x7, 1(x1)",
        "lw x8, 2(x1)",
        "lw x9, 3(x1)",
        "lw x10, 4(x1)",
        "lw x11, -4(x31)",
        "lw x12, -3(x31)",
        "lw x13, -2(x31)",
        "lw x14, -1(x31)",
    ])

    $test("mul", [
        "li x1, 0xABCD1234",
        "li x2, 0x90EF5678",
        "mul x3, x1, x2",
        "mulh x4, x1, x2",
        "mulhu x5, x1, x2",
        "mulhsu x6, x1, x2",
        "li x1, 0xABCD1234",
        "li x2, -1234",
        "mul x7, x1, x2",
        "mulh x8, x1, x2",
        "mulhu x9, x1, x2",
        "mulhsu x10, x1, x2",
        "li x1, -10",
        "li x2, -1234",
        "mul x11, x1, x2",
        "mulh x12, x1, x2",
        "mulhu x13, x1, x2",
        "mulhsu x14, x1, x2",
        "li x1, -0x0011eeee",
        "li x2, 0x00AAAAAA",
        "mul x15, x1, x2",
        "mulh x16, x1, x2",
        "mulhu x17, x1, x2",
        "mulhsu x18, x1, x2",
    ])

    $test("signed div", [
        "li x1, 1900",
        "li x2, 123",
        "li x3, -1799",
        "li x4, -4",
        "div x5, x0, x0",
        "div x6, x0, x1",
        "div x7, x0, x2",
        "div x8, x0, x3",
        "div x9, x0, x4",
        "div x10, x1, x0",
        "div x11, x1, x1",
        "div x12, x1, x2",
        "div x13, x1, x3",
        "div x14, x1, x4",
        "div x15, x2, x0",
        "div x16, x2, x1",
        "div x17, x2, x2",
        "div x18, x2, x3",
        "div x19, x2, x4",
        "div x20, x3, x0",
        "div x21, x3, x1",
        "div x22, x3, x2",
        "div x23, x3, x3",
        "div x24, x3, x4",
        "div x25, x4, x0",
        "div x26, x4, x1",
        "div x27, x4, x2",
        "div x28, x4, x3",
        "div x29, x4, x4",
        "div x1, x1, x1",
        "div x2, x2, x2",
        "div x3, x3, x3",
        "div x4, x4, x4",
        "div x30, x0, x0",
    ])

    $test("unsigned div", [
        "li x1, 1900",
        "li x2, 0x7FFFFFFF",
        "li x3, 0x80000000",
        "li x4, -4",
        "divu x5, x0, x0",
        "divu x6, x0, x1",
        "divu x7, x0, x2",
        "divu x8, x0, x3",
        "divu x9, x0, x4",
        "divu x10, x1, x0",
        "divu x11, x1, x1",
        "divu x12, x1, x2",
        "divu x13, x1, x3",
        "divu x14, x1, x4",
        "divu x15, x2, x0",
        "divu x16, x2, x1",
        "divu x17, x2, x2",
        "divu x18, x2, x3",
        "divu x19, x2, x4",
        "divu x20, x3, x0",
        "divu x21, x3, x1",
        "divu x22, x3, x2",
        "divu x23, x3, x3",
        "divu x24, x3, x4",
        "divu x25, x4, x0",
        "divu x26, x4, x1",
        "divu x27, x4, x2",
        "divu x28, x4, x3",
        "divu x29, x4, x4",
        "divu x1, x1, x1",
        "divu x2, x2, x2",
        "divu x3, x3, x3",
        "divu x4, x4, x4",
        "divu x30, x0, x0",
    ])

    $test("signed rem", [
        "li x1, 1900",
        "li x2, 123",
        "li x3, -1799",
        "li x4, -4",
        "rem x5, x0, x0",
        "rem x6, x0, x1",
        "rem x7, x0, x2",
        "rem x8, x0, x3",
        "rem x9, x0, x4",
        "rem x10, x1, x0",
        "rem x11, x1, x1",
        "rem x12, x1, x2",
        "rem x13, x1, x3",
        "rem x14, x1, x4",
        "rem x15, x2, x0",
        "rem x16, x2, x1",
        "rem x17, x2, x2",
        "rem x18, x2, x3",
        "rem x19, x2, x4",
        "rem x20, x3, x0",
        "rem x21, x3, x1",
        "rem x22, x3, x2",
        "rem x23, x3, x3",
        "rem x24, x3, x4",
        "rem x25, x4, x0",
        "rem x26, x4, x1",
        "rem x27, x4, x2",
        "rem x28, x4, x3",
        "rem x29, x4, x4",
        "rem x1, x1, x1",
        "rem x2, x2, x2",
        "rem x3, x3, x3",
        "rem x4, x4, x4",
        "rem x30, x0, x0",
    ])

    $test("unsigned rem", [
        "li x1, 1900",
        "li x2, 123",
        "li x3, -1799",
        "li x4, -4",
        "remu x5, x0, x0",
        "remu x6, x0, x1",
        "remu x7, x0, x2",
        "remu x8, x0, x3",
        "remu x9, x0, x4",
        "remu x10, x1, x0",
        "remu x11, x1, x1",
        "remu x12, x1, x2",
        "remu x13, x1, x3",
        "remu x14, x1, x4",
        "remu x15, x2, x0",
        "remu x16, x2, x1",
        "remu x17, x2, x2",
        "remu x18, x2, x3",
        "remu x19, x2, x4",
        "remu x20, x3, x0",
        "remu x21, x3, x1",
        "remu x22, x3, x2",
        "remu x23, x3, x3",
        "remu x24, x3, x4",
        "remu x25, x4, x0",
        "remu x26, x4, x1",
        "remu x27, x4, x2",
        "remu x28, x4, x3",
        "remu x29, x4, x4",
        "remu x1, x1, x1",
        "remu x2, x2, x2",
        "remu x3, x3, x3",
        "remu x4, x4, x4",
        "remu x30, x0, x0",
    ])

    $test("atomic", [
        "li x1, 100000",
        "li x2, 200000",
        "li x3, -1234567",
        "li x4, -10",
        "sw x1, 0(x1)",
        "amoswap.w x5, x2, (x1)",
        "lw x5, 0(x1)",
        "amoadd.w x6, x4, (x1)",
        "lw x7, 0(x1)",
        "amoand.w x8, x3, (x1)",
        "lw x9, 0(x1)",
        "amoor.w x10, x4, (x1)",
        "lw x11, 0(x1)",
        "amoxor.w x12, x3, (x1)",
        "lw x13, 0(x1)",
        "amomin.w x14, x4, (x1)",
        "lw x15, 0(x1)",
        "amomax.w x16, x3, (x1)",
        "lw x17, 0(x1)",
        "amomax.w x18, x2, (x1)",
        "lw x19, 0(x1)",
        "lr.w x20, (x1)",
        "sc.w x21, x1, (x1)",
        "sc.w x22, x1, (x2)",
        "sc.w x23, x1, (x2)",
        "sc.w x24, x1, (x1)",
        "sc.w x25, x1, (x1)",
    ])

    $test("fence.i", [
        "fence.i",
    ])
end

function selftest()
    tell @a "running tests"
    passed_tests = 0
    failed_tests = 0

    run_tests()

    tell @a "(passed_tests) tests passed, (failed_tests) tests failed"
end

