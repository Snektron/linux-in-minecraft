dir "/home/robin/.local/share/PrismLauncher/instances/linux/.minecraft/saves/linux/"
desc "oef auwie oei"

array x[32]

import riscv.py
import bit
import memory
import selftest
import longmath

$debug_decode = 0

function machine_reset()
    pc = 0
    trap = 0

    # The supported csr registers are all mostly taken from mini-rv32ima
    # See also https://raw.githubusercontent.com/riscv/virtual-memory/main/specs/663-Svpbmt.pdf
    mstatus = 0
    cyclel = 0
    cycleh = 0

    timerl = 0
    timerh = 0
    timermatchl = 0
    timermatchh = 0

    mscratch = 0
    mtvec = 0
    mie = 0
    mip = 0

    mepc = 0
    mtval = 0
    mcause = 0

    # TODO: This seems to be custom. Do we actually need this ever? Otherwise
    # we will just split it up across separate words for ease of access
    extraflags = 0

    # In extraflags in mini-rv32ima
    reserved = -1
    wfi = 0

    for i = 0 to 32
        x[i] = 0
    end

    memory_clear()
end

function machine_dump_state()
    tell @a "machine state: {wpc=(pc) {wtrap=(trap) {wreserved=(reserved)"

    x0 = x[0]
    x1 = x[1]
    x2 = x[2]
    x3 = x[3]
    x4 = x[4]
    x5 = x[5]
    x6 = x[6]
    x7 = x[7]
    x8 = x[8]
    x9 = x[9]
    x10 = x[10]
    x11 = x[11]
    x12 = x[12]
    x13 = x[13]
    x14 = x[14]
    x15 = x[15]
    x16 = x[16]
    x17 = x[17]
    x18 = x[18]
    x19 = x[19]
    x20 = x[20]
    x21 = x[21]
    x22 = x[22]
    x23 = x[23]
    x24 = x[24]
    x25 = x[25]
    x26 = x[26]
    x27 = x[27]
    x28 = x[28]
    x29 = x[29]
    x30 = x[30]
    x31 = x[31]

    tell @a "{wx00=(x0) {wx01=(x1) {wx02=(x2) {wx03=(x3) {wx04=(x4) {wx05=(x5) {wx06=(x6) {wx07=(x7)"
    tell @a "{wx08=(x8) {wx09=(x9) {wx10=(x10) {wx11=(x11) {wx12=(x12) {wx13=(x13) {wx14=(x14) {wx15=(x15)"
    tell @a "{wx16=(x16) {wx17=(x17) {wx18=(x18) {wx19=(x19) {wx20=(x20) {wx21=(x21) {wx22=(x22) {wx23=(x23)"
    tell @a "{wx24=(x24) {wx25=(x25) {wx26=(x26) {wx27=(x27) {wx28=(x28) {wx29=(x29) {wx30=(x30) {wx31=(x31)"
end

macro $rtype($class)
    rd     = inst / 0x80 % 0x20
    funct3 = inst / 0x1000 % 0x8
    rs1    = inst / 0x8000 % 0x20
    rs2    = inst / 0x100000 % 0x20
    funct7 = inst / 0x2000000 % 0x80

    if $debug_decode
        tell @a "(pc): (inst) $class rtype {wopcode=(opcode) {wrd=x(rd) {wrs1=x(rs1) {wrs2=x(rs2) {wfunct3=(funct3) {wfunct7=(funct7)"
    end
end

macro $itype($class)
    rd     = inst / 0x80 % 0x20
    funct3 = inst / 0x1000 % 0x8
    rs1    = inst / 0x8000 % 0x20
    imm    = inst / 0x100000

    if $debug_decode
        tell @a "(pc): (inst) $class itype {wopcode=(opcode) {wrd=x(rd) {wrs1=x(rs1) {wimm=(imm) {wfunct3=(funct3)"
    end
end

macro $stype($class)
    imm_4_0  = inst / 0x80 % 0x20
    funct3   = inst / 0x1000 % 0x8
    rs1      = inst / 0x8000 % 0x20
    rs2      = inst / 0x100000 % 0x20
    imm_11_5 = inst / 0x2000000

    # Note: imm_11_5 is already signed extended here
    imm = imm_11_5 * 32 + imm_4_0

    if $debug_decode
        tell @a "(pc): (inst) $class stype {wopcode=(opcode) {wrs1=x(rs1) {wrs2=x(rs2) {wimm=(imm) {wfunct3=(funct3)"
    end
end

macro $btype($class)
    imm_11   = inst / 0x80 % 0x2
    imm_4_1  = inst / 0x100 % 0x10
    funct3   = inst / 0x1000 % 0x8
    rs1      = inst / 0x8000 % 0x20
    rs2      = inst / 0x100000 % 0x20
    imm_10_5 = inst / 0x2000000 % 0x40
    imm_12   = inst / 0x40000000 / 2 # Extra divide because 0x80000000 is out of range...

    # Reconstruct imm from parts
    # TODO: Is sign extending correct here?
    imm = imm_12 * 4096 + imm_11 * 2048 + imm_10_5 * 32 + imm_4_1 * 2

    if $debug_decode
        tell @a "(pc): (inst) $class btype {wopcode=(opcode) {wrs1=x(rs1) {wrs2=x(rs2) {wimm=(imm) {wfunct3=(funct3)"
    end
end

macro $utype($class)
    rd  = inst / 0x80 % 0x20
    imm = inst / 0x1000

    # TODO: Should this be sign extended or not?

    if $debug_decode
        tell @a "(pc): (inst) $class utype {wopcode=(opcode) {wrd=x(rd) {wimm=(imm)"
    end
end

macro $jtype($class)
    rd        = inst / 0x80 % 0x20
    imm_19_12 = inst / 0x1000 % 0x100
    imm_11    = inst / 0x100000 % 0x2
    imm_10_1  = inst / 0x200000 % 0x400

    # Reconstruct imm from parts
    # TODO: Is sign extending correct here?
    imm = imm_19_12 * 4096 + imm_11 * 2048 + imm_10_1 * 2

    # This decodes imm_20 using an if instead of division and multiply
    if inst < 0
        imm -= 1048576
    end

    if $debug_decode
        tell @a "(pc): (inst) $class jtype {wopcode=(opcode) {wrd=x(rd) {wimm=(imm)"
    end
end

function arith(lhs, rhs)
    switch funct3
        case 0x0
            switch funct7
                case 0x00
                    # ADD
                    res = lhs + rhs
                    trap = 0
                end
                case 0x20
                    # SUB
                    res = lhs - rhs
                    trap = 0
                end
            end
        end
        case 0x1
            # SLL
            if funct7 == 0x00
                res = bit_sll(lhs, rhs % 32)
                trap = 0
            end
        end
        case 0x2
            # SLT
            if lhs < rhs
                res = 1
            else
                res = 0
            end
            trap = 0
        end
        case 0x3
            # SLTU
            if lhs - INT_MIN < rhs - INT_MIN
                res = 1
            else
                res = 0
            end
            trap = 0
        end
        case 0x4
            # XORI
            res = bit_xor(lhs, rhs)
            trap = 0
        end
        case 0x5
            switch funct7
                case 0x00
                    # SRL
                    res = bit_srl(lhs, rhs % 32)
                    trap = 0
                end
                case 0x20
                    # SRA
                    res = bit_sra(lhs, rhs % 32)
                    trap = 0
                end
            end
        end
        case 0x6
            # OR
            res = bit_or(lhs, rhs)
            trap = 0
        end
        case 0x7
            # AND
            res = bit_and(lhs, rhs)
            trap = 0
        end
    end

    if trap == 0 and rd > 0
        x[rd] = res
    end
end

function op()
    arith(x[rs1], x[rs2])
end

function op_imm()
    # Derive funct7 from imm if we are dealing with shift operations,
    # and then just call the regular arithmetic handler.
    if funct3 == 0x1
        funct7 = imm / 32
    else if funct3 == 0x5
        funct7 = imm / 32
    else
        funct7 = 0
    end

    arith(x[rs1], imm)
end

function op_m()
    lhs = x[rs1]
    rhs = x[rs2]
    switch funct3
        case 0x0
            # MUL
            res = lhs * rhs
            trap = 0
        end
        case 0x1
            # MULH
            mul64(lhs, rhs)
            res = c1
            trap = 0
        end
        case 0x2
            # MULHSU
            mul64su(lhs, rhs)
            res = c1
            trap = 0
        end
        case 0x3
            # MULHU
            mul64u(lhs, rhs)
            res = c1
            trap = 0
        end
        case 0x4
            # DIV
            # Minecraft division rounds towards negative infinity, but
            # RISC-V division rounds towards zero. If the result is negative
            # we have to fix it up.
            if rhs == 0
                res = -1
            else if lhs == INT_MIN and rhs == -1
                res = lhs
            else
                res = lhs / rhs
                if lhs % rhs == 0
                else if lhs < 0 and rhs >= 0
                    res += 1
                else if lhs >= 0 and rhs < 0
                    res += 1
                end
            end

            trap = 0
        end
        case 0x5
            # DIVU
            udivmod(lhs, rhs)
            res = div
            trap = 0
        end
        case 0x6
            # REM
            # Same as with division: If the result of the corresponding division
            # is negative, the result is negative in minecraft. In RISC-V the
            # result is weird, so we have to fix up the result.
            if rhs == 0
                res = lhs
            else if lhs == INT_MIN and rhs == -1
                res = 0
            else
                res = lhs % rhs
                if res == 0
                else
                    if rhs < 0 and lhs > 0
                        res -= rhs
                    else if lhs <= 0 and rhs > 0
                        # If the result were always positive (as is normal), this would be plus
                        # instead of minus. But its weird.
                        res -= rhs
                    end
                end
            end

            trap = 0
        end
        case 0x7
            # REMU
            udivmod(lhs, rhs)
            res = rem
            trap = 0
        end
    end

    if trap == 0 and rd > 0
        x[rd] = res
    end
end

function branch()
    jump = 0
    lhs = x[rs1]
    rhs = x[rs2]
    switch funct3
        case 0x0
            # BEQ
            if lhs == rhs
                jump = 1
            end
            trap = 0
        end
        case 0x1
            # BNE
            if lhs == rhs
            else
                jump = 1
            end
            trap = 0
        end
        case 0x4
            # BLT
            if lhs < rhs
                jump = 1
            end
            trap = 0
        end
        case 0x5
            # BGE
            if lhs < rhs
            else
                jump = 1
            end
            trap = 0
        end
        case 0x6
            # BLTU
            if lhs - INT_MIN < rhs - INT_MIN
                jump = 1
            end
            trap = 0
        end
        case 0x7
            # BGEU
            if lhs - INT_MIN < rhs - INT_MIN
            else
                jump = 1
            end
            trap = 0
        end
    end

    if trap == 0 and jump
        pc += imm - 4
    end
end

function load()
    src = x[rs1] + imm
    switch funct3
        case 0x0
            # Load byte, signed
            res = memory_load_u8(src)
            # Sign extend
            if res >= 0x80
                res -= 0x100
            end
            trap = 0
        end
        case 0x1
            # Load half, signed
            v0 = memory_load_u8(src)
            v1 = memory_load_u8(src + 1)
            res = v1 * 0x100 + v0
            if res >= 0x8000
                res -= 0x10000
            end
            trap = 0
        end
        case 0x2
            # Load word
            # Happy path: aligned word load
            if src % 4 == 0
                res = memory_get(src / 4)
            else
                v0 = memory_load_u8(src)
                v1 = memory_load_u8(src + 1)
                v2 = memory_load_u8(src + 2)
                v3 = memory_load_u8(src + 3)
                res = v3 * 0x1000000 + v2 * 0x10000 + v1 * 0x100 + v0
            end
            trap = 0
        end
        case 0x4
            # Load byte, unsigned
            res = memory_load_u8(src)
            trap = 0
        end
        case 0x5
            # Load half, unsigned
            v0 = memory_load_u8(src)
            v1 = memory_load_u8(src + 1)
            res = v1 * 0x100 + v0
            trap = 0
        end
    end

    if rd > 0 and trap == 0
        x[rd] = res
    end
end

function store()
    dst = x[rs1] + imm
    val = x[rs2]

    switch funct3
        case 0x0
            # Byte store
            memory_store_u8(dst, val % 0x100)
            trap = 0
        end
        case 0x1
            # Half store
            # TODO: Optimize
            memory_store_u8(dst, val % 0x100)
            memory_store_u8(dst + 1, val / 0x100 % 0x100)
            trap = 0
        end
        case 0x2
            # Word store
            if dst % 4 == 0
                # Happy path: aligned word store
                memory_set(dst / 4, val)
            else
                # TODO: Optimize
                memory_store_u8(dst, val % 0x100)
                memory_store_u8(dst + 1, val / 0x100 % 0x100)
                memory_store_u8(dst + 2, val / 0x10000 % 0x100)
                memory_store_u8(dst + 3, val / 0x1000000 % 0x100)
            end
            trap = 0
        end
    end
end

function atomic()
    funct5 = funct7 / 4
    if funct3 == 0x2
        # TODO: Misaligned address exception?
        src = x[rs1]
        lhs = memory_get(src / 4)
        rhs = x[rs2]
        write = 1
        switch funct5
            case 0x00
                # atomic ADD
                res = lhs + rhs
                trap = 0
            end
            case 0x01
                # atomic swap
                res = rhs
                trap = 0
            end
            case 0x02
                # atomic load
                # TODO: CSR stuff?
                res = lhs
                write = 0
                trap = 0
                # This implementation can apparently be fairly arbitrary: Allowing stores
                # to be always successful seems correct behavior. However, we will be emulating
                # mini-rv32ima here at least somewhat so that its easier to test whether the
                # behavior is correct.
                reserved = src
            end
            case 0x03
                # atomic store (conditional)
                # TODO: CSR stuff?
                if reserved == src
                    lhs = 0
                else
                    lhs = 1
                    write = 0
                end
                trap = 0
            end
            case 0x04
                # atomic XOR
                res = bit_xor(lhs, rhs)
                trap = 0
            end
            case 0x08
                # atomic OR
                res = bit_or(lhs, rhs)
                trap = 0
            end
            case 0x0C
                # atomic AND
                res = bit_and(lhs, rhs)
                trap = 0
            end
            case 0x10
                # atomic MIN
                if lhs < rhs
                    res = lhs
                else
                    res = rhs
                end
                trap = 0
            end
            case 0x14
                # atomic MAX
                if lhs > rhs
                    res = lhs
                else
                    res = rhs
                end
                trap = 0
            end
        end
    end
    if trap == 0
        if rd > 0
            x[rd] = lhs
        end
        if write
            memory_set(src / 4, res)
        end
    end
end

function csr()
    lhs = x[rs1]
    imm %= 2048 # Make CSR number unsigned

    csrval = 0
    switch imm
        case 0x340
            csrval = mscratch
        end
        case 0x305
            csrval = mtvec
        end
        case 0x304
            csrval = mie
        end
        case 0xC00
            csrval = cyclel
        end
        case 0x344
            csrval = mip
        end
        case 0x341
            csrval = mepc
        end
        case 0x300
            csrval = mstatus
        end
        case 0x342
            csrval = mcause
        end
        case 0x343
            csrval = mtval
        end
        case 0xf11
            # mvendorid
            csrval = 0
        end
        case 0x301
            # misa
            # Just copied from mini-rv32ima
            csrval = 0x40401101
        end
    end

    switch funct3
        case 0x01
            # CSRRW
            res = lhs
        end
        case 0x02
            # CSRRS
            res = bit_or(csrval, lhs)
        end
        case 0x03
            # CSRRC
            res = bit_and(csrval, -1 - lhs)
        end
        case 0x05
            # CSRWI
            res = rs1
        end
        case 0x06
            # CSRRSI
            res = bit_or(csrval, rs1)
        end
        case 0x07
            # CSRRCI
            res = bit_and(csrval, -1 - rs1)
        end
    end

    switch imm
        case 0x340
            mscratch = res
        end
        case 0x305
            mtvec = res
        end
        case 0x304
            mie = res
        end
        case 0x344
            mip = res
        end
        case 0x341
            mepc = res
        end
        case 0x300
            mstatus = res
        end
        case 0x342
            mcause = res
        end
        case 0x343
            mtval = res
        end
    end

    if rd > 0
        x[rd] = csrval
    end

    trap = 0
end

# Execute one instruction
function execute(elapsed_us)
    # Configure trap to invalid instruction by default. Instructions clear trap if they are handled properly.
    trap = 0

    # Increment timer
    new_timer = timerl + elapsed_us
    if new_timer - INT_MIN < timerl - INT_MIN
        timerh++
    end
    timerl = new_timer

    # Handle timer interrupt
    timerint = 0
    if timerh - INT_MIN < timermatchh - INT_MIN
    else if timerh == timermatchh and timerl - INT_MIN < timermatchl - INT_MIN
    else if timermatchh == 0 and timermatchl == 0
    else
        timerint = 1
    end

    miph = mip / 256
    mipl = mip % 128
    if timerint
        mip = miph * 256 + mipl + 128
        wfi = 0
    else
        mip = miph * 256 + mipl
    end

    # Handle WFI
    if trap == 0 and wfi
        # Just do nothing
    else unless pc % 4 == 0
        # Misaligned PC
        trap = 1 + 0
    else if trap == 0
        inst = memory_get(pc / 4)
        # Opcode is low 7 bits
        opcode = inst % 128
        # tell @a "(pc): {winst=(inst) {wopcode=(opcode)"

        trap = 2 + 1
        switch opcode
            case $"0b0110011"
                $rtype("OP")
                if funct7 == 0x01
                    op_m()
                else
                    op()
                end
            end
            case $"0b0010011"
                $itype("OP-IMM")
                op_imm()
            end
            case $"0b0000011"
                $itype("LOAD")
                load()
            end
            case $"0b0100011"
                $stype("STORE")
                store()
            end
            case $"0b1100011"
                $btype("BRANCH")
                branch()
            end
            case $"0b1101111"
                $jtype("JAL")
                if rd > 0
                    res = pc + 4
                    x[rd] = res
                end
                pc += imm - 4
                trap = 0
            end
            case $"0b1100111"
                $itype("JALR")
                if rd > 0
                    res = pc + 4
                    x[rd] = res
                end
                pc = x[rs1] + imm - 4
                trap = 0
            end
            case $"0b0110111"
                $utype("LUI")
                if rd > 0
                    res = imm * 0x1000
                    x[rd] = res
                end
                trap = 0
            end
            case $"0b0010111"
                $utype("AUIPC")
                if rd > 0
                    res = pc + imm * 0x1000
                    x[rd] = res
                end
                trap = 0
            end
            case $"0b1110011"
                $itype("SYSTEM")
                if funct3 == 0
                    switch imm
                        case 0x00
                            # ecall
                            # TODO
                        end
                        case 0x01
                            # ebreak
                            # Just dump the machine's state for this one
                            tell @a "{Mebreak"
                            machine_dump_state()
                            trap = 0
                        end
                        case 0x105
                            # WFI
                            if mstatus % 16 < 8
                                mstatus += 8
                            end
                            wfi = 1
                            pc += 4
                            trap = 0
                        end
                    end
                else if funct3 == 4
                else
                    csr()
                end
            end
            case $"0b0101111"
                $rtype("ATOMIC")
                atomic()
            end
            case $"0b001111"
                $itype("FENCE")
                # NO-OP on this architecture
                if funct3 == 1
                    trap = 0
                end
            end
        end
    end

    if trap
        # TODO: Set machine state?
        tell @a "{Rerror trap={w(trap) {wpc=(pc) {winst=(inst) {wopcode=(opcode)"
    else unless wfi
        pc += 4
        cyclel++
        if cyclel == 0
            cycleh++
        end
    end
end

reset
    tell @a "reset"

    # For some reason the compiler / minecraft wont let us express this value, so
    # we have to precompute it
    INT_MIN = 0x40000000 + 0x40000000

    selftest()

    tell @a "done"
end

clock tick
end
