$pagesize = 0x100
$emptypage = $"[0] * 0x100"
$ramsize = $pagesize ** 3

function memory_clear()
    /data modify storage memory:mem tmp1 set value $emptypage
    /data modify storage memory:mem tmp2 set value []

    for $i in $range($pagesize)
        /data modify storage memory:mem tmp2 append from storage memory:mem tmp1
    end

    /data modify storage memory:mem mem set value []
    for $i in $range($pagesize)
        /data modify storage memory:mem mem append from storage memory:mem tmp2
    end
end

# Note: addr is in *words*, not in bytes!
function memory_get(addr)
    # TODO: Caching system
    # Index the first level
    switch addr / ($pagesize * $pagesize)
        case $addr in $range($pagesize)
            /data modify storage memory:mem tmp set from storage memory:mem mem[$addr]
        end
    end

    # first level is now in tmp, index into the second level
    switch addr / $pagesize % $pagesize
        case $addr in $range($pagesize)
            /data modify storage memory:mem tmp set from storage memory:mem tmp[$addr]
        end
    end

    # second level is now in tmp, index into the third level to get the final value
    switch addr % $pagesize
        case $addr in $range($pagesize)
            /data modify storage memory:mem tmp set from storage memory:mem tmp[$addr]
        end
    end

    /execute store result score Global _result run data get storage memory:mem tmp
    return _result
end

# Note: addr is in *words*, not in bytes!
function memory_set(addr, value)
    # TODO: Caching system
    # Convert value from scoreboard value to storage value
    /execute store result storage memory:mem tmp int 1 run scoreboard players get Global value

    # Index the first level
    switch addr / ($pagesize * $pagesize)
        case $addr in $range($pagesize)
            /data modify storage memory:mem tmp1 set from storage memory:mem mem[$addr]
        end
    end

    # first level is now in tmp1, index into the second level
    switch addr / $pagesize % $pagesize
        case $addr in $range($pagesize)
            /data modify storage memory:mem tmp2 set from storage memory:mem tmp1[$addr]
        end
    end

    # second level is now in tmp2, store the value
    switch addr % $pagesize
        case $addr in $range($pagesize)
            /data modify storage memory:mem tmp2[$addr] set from storage memory:mem tmp
        end
    end

    # Store the third level back into the second
    switch addr / $pagesize % $pagesize
        case $addr in $range($pagesize)
            /data modify storage memory:mem tmp1[$addr] set from storage memory:mem tmp2
        end
    end

    # Store the second level back into the first
    switch addr / ($pagesize * $pagesize)
        case $addr in $range($pagesize)
            /data modify storage memory:mem mem[$addr] set from storage memory:mem tmp1
        end
    end
end

# Note: addr is in *bytes*, not in words!
function memory_store_u8(addr, byte)
    # The memory is in words, so we need to perform
    # a SDWA RMW.
    # TODO: This can probably be optimized by caching the temporary memory
    # thingies

    offset = addr / 4
    subword = addr % 4
    tmp = memory_get(offset)

    # Update the relevant byte in the word
    # Writing these cases as a single line seemed buggy
    switch subword
        case 0
            tmp /= 0x100
            tmp *= 0x100
            tmp += byte
        end
        case 1
            tmp2 = tmp
            # Clear out relevant bits
            tmp /= 0x10000
            tmp *= 0x10000
            tmp += tmp2 % 0x100
            # Insert new bits
            tmp += byte * 0x100
        end
        case 2
            # This copy is required for some reason
            tmp2 = tmp
            # Clear out relevant bits
            tmp /= 0x1000000
            tmp *= 0x1000000
            tmp += tmp2 % 0x10000
            # Insert new bits
            tmp += byte * 0x10000
        end
        case 3
            tmp %= 0x1000000
            tmp += byte * 0x1000000
        end
    end

    # And write back to memory
    memory_set(offset, tmp)
end

# Note: addr is in *bytes*, not in words!
function memory_load_u8(addr)
    offset = addr / 4
    subword = addr % 4
    res = memory_get(offset)
    switch subword
        case 1
            res /= 0x100
        end
        case 2
            res /= 0x10000
        end
        case 3
            res /= 0x1000000
        end
    end
    res %= 0x100
    return res
end
